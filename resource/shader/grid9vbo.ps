#version 110
uniform sampler2D texture1;

varying vec2 out_texcoord;

uniform float top;
uniform float bottom;
uniform float left;
uniform float right;
uniform float sx;
uniform float sy;

//九宫格uv转化
vec2 convertUV(vec2 _texcoord){
	const float aw = 1.0;
	const float ah = 1.0;
	vec2 result = _texcoord;
	vec2 origin = _texcoord;
	if(left + right > sx){
		result.x = origin.x;
	}else{
		if (origin.x * sx < left){
			result.x = origin.x * sx;
		}else{
			if((aw-origin.x)*sx < right){
				result.x = aw - (aw - origin.x) * sx;
			}else{ 
				result.x = (origin.x * sx - left) / (sx - left - right)*(aw - left - right) + left;
			}
		}
	}
	if (top + bottom > sy){
		result.y = origin.y;
	}else{
		
	
		if (origin.y * sy < top){
			result.y = origin.y * sy ;//bottom
			//discard;
		}else{
			if ((ah - origin.y) * sy < bottom){
				result.y = ah - (ah - origin.y) * sy;//top ok
				//discard;
			}else{
				result.y = (origin.y * sy - top) / (sy - top - bottom)*(ah - top - bottom) + top;//middle
				//discard;
			}
		}
	}
	//result.y = result.y * p;
	return result;
}

void main(void){
	vec2 result = convertUV(out_texcoord);
	vec4 finalColor=texture2D(texture1, result);
	
	//float v = dot(finalColor.rgb,vec3(0.3,0.59,0.11));
	//gl_FragColor = vec4(v,v,v,1.0);//灰度滤镜
	
	gl_FragColor = finalColor;
}